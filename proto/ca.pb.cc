// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ca.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ca.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace ca {

namespace {

const ::google::protobuf::Descriptor* csr_push_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csr_push_reflection_ = NULL;
const ::google::protobuf::Descriptor* cert_push_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cert_push_reflection_ = NULL;
const ::google::protobuf::Descriptor* push_ok_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  push_ok_reflection_ = NULL;
const ::google::protobuf::Descriptor* cert_pull_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cert_pull_reflection_ = NULL;
const ::google::protobuf::Descriptor* csr_pull_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csr_pull_reflection_ = NULL;
const ::google::protobuf::Descriptor* csr_pendding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csr_pendding_reflection_ = NULL;
const ::google::protobuf::Descriptor* csr_pendding_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csr_pendding_list_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ca_2eproto() {
  protobuf_AddDesc_ca_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ca.proto");
  GOOGLE_CHECK(file != NULL);
  csr_push_descriptor_ = file->message_type(0);
  static const int csr_push_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csr_push, fingerprint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csr_push, csr_),
  };
  csr_push_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      csr_push_descriptor_,
      csr_push::default_instance_,
      csr_push_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csr_push, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csr_push, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(csr_push));
  cert_push_descriptor_ = file->message_type(1);
  static const int cert_push_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cert_push, fingerprint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cert_push, cert_),
  };
  cert_push_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cert_push_descriptor_,
      cert_push::default_instance_,
      cert_push_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cert_push, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cert_push, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cert_push));
  push_ok_descriptor_ = file->message_type(2);
  static const int push_ok_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(push_ok, fingerprints_),
  };
  push_ok_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      push_ok_descriptor_,
      push_ok::default_instance_,
      push_ok_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(push_ok, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(push_ok, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(push_ok));
  cert_pull_descriptor_ = file->message_type(3);
  static const int cert_pull_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cert_pull, fingerprint_),
  };
  cert_pull_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cert_pull_descriptor_,
      cert_pull::default_instance_,
      cert_pull_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cert_pull, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cert_pull, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cert_pull));
  csr_pull_descriptor_ = file->message_type(4);
  static const int csr_pull_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csr_pull, fingerprint_),
  };
  csr_pull_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      csr_pull_descriptor_,
      csr_pull::default_instance_,
      csr_pull_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csr_pull, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csr_pull, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(csr_pull));
  csr_pendding_descriptor_ = file->message_type(5);
  static const int csr_pendding_offsets_[1] = {
  };
  csr_pendding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      csr_pendding_descriptor_,
      csr_pendding::default_instance_,
      csr_pendding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csr_pendding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csr_pendding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(csr_pendding));
  csr_pendding_list_descriptor_ = file->message_type(6);
  static const int csr_pendding_list_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csr_pendding_list, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csr_pendding_list, fingerprint_),
  };
  csr_pendding_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      csr_pendding_list_descriptor_,
      csr_pendding_list::default_instance_,
      csr_pendding_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csr_pendding_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csr_pendding_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(csr_pendding_list));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ca_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    csr_push_descriptor_, &csr_push::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cert_push_descriptor_, &cert_push::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    push_ok_descriptor_, &push_ok::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cert_pull_descriptor_, &cert_pull::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    csr_pull_descriptor_, &csr_pull::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    csr_pendding_descriptor_, &csr_pendding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    csr_pendding_list_descriptor_, &csr_pendding_list::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ca_2eproto() {
  delete csr_push::default_instance_;
  delete csr_push_reflection_;
  delete cert_push::default_instance_;
  delete cert_push_reflection_;
  delete push_ok::default_instance_;
  delete push_ok_reflection_;
  delete cert_pull::default_instance_;
  delete cert_pull_reflection_;
  delete csr_pull::default_instance_;
  delete csr_pull_reflection_;
  delete csr_pendding::default_instance_;
  delete csr_pendding_reflection_;
  delete csr_pendding_list::default_instance_;
  delete csr_pendding_list_reflection_;
}

void protobuf_AddDesc_ca_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010ca.proto\022\010proto.ca\",\n\010csr_push\022\023\n\013fing"
    "erprint\030\001 \002(\014\022\013\n\003csr\030\002 \002(\014\".\n\tcert_push\022"
    "\023\n\013fingerprint\030\001 \002(\014\022\014\n\004cert\030\002 \002(\014\"\037\n\007pu"
    "sh_ok\022\024\n\014fingerprints\030\001 \003(\014\" \n\tcert_pull"
    "\022\023\n\013fingerprint\030\001 \002(\014\"\037\n\010csr_pull\022\023\n\013fin"
    "gerprint\030\001 \002(\014\"\016\n\014csr_pendding\"5\n\021csr_pe"
    "ndding_list\022\013\n\003num\030\001 \002(\r\022\023\n\013fingerprint\030"
    "\002 \003(\014", 285);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ca.proto", &protobuf_RegisterTypes);
  csr_push::default_instance_ = new csr_push();
  cert_push::default_instance_ = new cert_push();
  push_ok::default_instance_ = new push_ok();
  cert_pull::default_instance_ = new cert_pull();
  csr_pull::default_instance_ = new csr_pull();
  csr_pendding::default_instance_ = new csr_pendding();
  csr_pendding_list::default_instance_ = new csr_pendding_list();
  csr_push::default_instance_->InitAsDefaultInstance();
  cert_push::default_instance_->InitAsDefaultInstance();
  push_ok::default_instance_->InitAsDefaultInstance();
  cert_pull::default_instance_->InitAsDefaultInstance();
  csr_pull::default_instance_->InitAsDefaultInstance();
  csr_pendding::default_instance_->InitAsDefaultInstance();
  csr_pendding_list::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ca_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ca_2eproto {
  StaticDescriptorInitializer_ca_2eproto() {
    protobuf_AddDesc_ca_2eproto();
  }
} static_descriptor_initializer_ca_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int csr_push::kFingerprintFieldNumber;
const int csr_push::kCsrFieldNumber;
#endif  // !_MSC_VER

csr_push::csr_push()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ca.csr_push)
}

void csr_push::InitAsDefaultInstance() {
}

csr_push::csr_push(const csr_push& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.ca.csr_push)
}

void csr_push::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fingerprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  csr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
csr_push::csr_push(csr_push&& from)
  : ::google::protobuf::Message() {
  Swap(&from);
}
#endif

csr_push::~csr_push() {
  // @@protoc_insertion_point(destructor:proto.ca.csr_push)
  SharedDtor();
}

void csr_push::SharedDtor() {
  if (fingerprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fingerprint_;
  }
  if (csr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete csr_;
  }
  if (this != default_instance_) {
  }
}

void csr_push::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csr_push::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csr_push_descriptor_;
}

const csr_push& csr_push::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ca_2eproto();
  return *default_instance_;
}

csr_push* csr_push::default_instance_ = NULL;

csr_push* csr_push::New() const {
  return new csr_push;
}

void csr_push::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_fingerprint()) {
      if (fingerprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fingerprint_->clear();
      }
    }
    if (has_csr()) {
      if (csr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        csr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool csr_push::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ca.csr_push)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes fingerprint = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fingerprint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_csr;
        break;
      }

      // required bytes csr = 2;
      case 2: {
        if (tag == 18) {
         parse_csr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_csr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ca.csr_push)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ca.csr_push)
  return false;
#undef DO_
}

void csr_push::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ca.csr_push)
  // required bytes fingerprint = 1;
  if (has_fingerprint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->fingerprint(), output);
  }

  // required bytes csr = 2;
  if (has_csr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->csr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ca.csr_push)
}

::google::protobuf::uint8* csr_push::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ca.csr_push)
  // required bytes fingerprint = 1;
  if (has_fingerprint()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->fingerprint(), target);
  }

  // required bytes csr = 2;
  if (has_csr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->csr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ca.csr_push)
  return target;
}

int csr_push::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes fingerprint = 1;
    if (has_fingerprint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fingerprint());
    }

    // required bytes csr = 2;
    if (has_csr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->csr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csr_push::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const csr_push* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const csr_push*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void csr_push::MergeFrom(const csr_push& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fingerprint()) {
      set_fingerprint(from.fingerprint());
    }
    if (from.has_csr()) {
      set_csr(from.csr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void csr_push::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csr_push::CopyFrom(const csr_push& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csr_push::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void csr_push::Swap(csr_push* other) {
  if (other != this) {
    std::swap(fingerprint_, other->fingerprint_);
    std::swap(csr_, other->csr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata csr_push::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csr_push_descriptor_;
  metadata.reflection = csr_push_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cert_push::kFingerprintFieldNumber;
const int cert_push::kCertFieldNumber;
#endif  // !_MSC_VER

cert_push::cert_push()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ca.cert_push)
}

void cert_push::InitAsDefaultInstance() {
}

cert_push::cert_push(const cert_push& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.ca.cert_push)
}

void cert_push::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fingerprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
cert_push::cert_push(cert_push&& from)
  : ::google::protobuf::Message() {
  Swap(&from);
}
#endif

cert_push::~cert_push() {
  // @@protoc_insertion_point(destructor:proto.ca.cert_push)
  SharedDtor();
}

void cert_push::SharedDtor() {
  if (fingerprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fingerprint_;
  }
  if (cert_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cert_;
  }
  if (this != default_instance_) {
  }
}

void cert_push::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cert_push::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cert_push_descriptor_;
}

const cert_push& cert_push::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ca_2eproto();
  return *default_instance_;
}

cert_push* cert_push::default_instance_ = NULL;

cert_push* cert_push::New() const {
  return new cert_push;
}

void cert_push::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_fingerprint()) {
      if (fingerprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fingerprint_->clear();
      }
    }
    if (has_cert()) {
      if (cert_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cert_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cert_push::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ca.cert_push)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes fingerprint = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fingerprint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cert;
        break;
      }

      // required bytes cert = 2;
      case 2: {
        if (tag == 18) {
         parse_cert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cert()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ca.cert_push)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ca.cert_push)
  return false;
#undef DO_
}

void cert_push::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ca.cert_push)
  // required bytes fingerprint = 1;
  if (has_fingerprint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->fingerprint(), output);
  }

  // required bytes cert = 2;
  if (has_cert()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->cert(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ca.cert_push)
}

::google::protobuf::uint8* cert_push::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ca.cert_push)
  // required bytes fingerprint = 1;
  if (has_fingerprint()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->fingerprint(), target);
  }

  // required bytes cert = 2;
  if (has_cert()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cert(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ca.cert_push)
  return target;
}

int cert_push::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes fingerprint = 1;
    if (has_fingerprint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fingerprint());
    }

    // required bytes cert = 2;
    if (has_cert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cert());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cert_push::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cert_push* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cert_push*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cert_push::MergeFrom(const cert_push& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fingerprint()) {
      set_fingerprint(from.fingerprint());
    }
    if (from.has_cert()) {
      set_cert(from.cert());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cert_push::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cert_push::CopyFrom(const cert_push& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cert_push::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void cert_push::Swap(cert_push* other) {
  if (other != this) {
    std::swap(fingerprint_, other->fingerprint_);
    std::swap(cert_, other->cert_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cert_push::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cert_push_descriptor_;
  metadata.reflection = cert_push_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int push_ok::kFingerprintsFieldNumber;
#endif  // !_MSC_VER

push_ok::push_ok()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ca.push_ok)
}

void push_ok::InitAsDefaultInstance() {
}

push_ok::push_ok(const push_ok& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.ca.push_ok)
}

void push_ok::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
push_ok::push_ok(push_ok&& from)
  : ::google::protobuf::Message() {
  Swap(&from);
}
#endif

push_ok::~push_ok() {
  // @@protoc_insertion_point(destructor:proto.ca.push_ok)
  SharedDtor();
}

void push_ok::SharedDtor() {
  if (this != default_instance_) {
  }
}

void push_ok::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* push_ok::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return push_ok_descriptor_;
}

const push_ok& push_ok::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ca_2eproto();
  return *default_instance_;
}

push_ok* push_ok::default_instance_ = NULL;

push_ok* push_ok::New() const {
  return new push_ok;
}

void push_ok::Clear() {
  fingerprints_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool push_ok::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ca.push_ok)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes fingerprints = 1;
      case 1: {
        if (tag == 10) {
         parse_fingerprints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_fingerprints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_fingerprints;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ca.push_ok)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ca.push_ok)
  return false;
#undef DO_
}

void push_ok::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ca.push_ok)
  // repeated bytes fingerprints = 1;
  for (int i = 0; i < this->fingerprints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->fingerprints(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ca.push_ok)
}

::google::protobuf::uint8* push_ok::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ca.push_ok)
  // repeated bytes fingerprints = 1;
  for (int i = 0; i < this->fingerprints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->fingerprints(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ca.push_ok)
  return target;
}

int push_ok::ByteSize() const {
  int total_size = 0;

  // repeated bytes fingerprints = 1;
  total_size += 1 * this->fingerprints_size();
  for (int i = 0; i < this->fingerprints_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->fingerprints(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void push_ok::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const push_ok* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const push_ok*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void push_ok::MergeFrom(const push_ok& from) {
  GOOGLE_CHECK_NE(&from, this);
  fingerprints_.MergeFrom(from.fingerprints_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void push_ok::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void push_ok::CopyFrom(const push_ok& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool push_ok::IsInitialized() const {

  return true;
}

void push_ok::Swap(push_ok* other) {
  if (other != this) {
    fingerprints_.Swap(&other->fingerprints_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata push_ok::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = push_ok_descriptor_;
  metadata.reflection = push_ok_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cert_pull::kFingerprintFieldNumber;
#endif  // !_MSC_VER

cert_pull::cert_pull()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ca.cert_pull)
}

void cert_pull::InitAsDefaultInstance() {
}

cert_pull::cert_pull(const cert_pull& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.ca.cert_pull)
}

void cert_pull::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fingerprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
cert_pull::cert_pull(cert_pull&& from)
  : ::google::protobuf::Message() {
  Swap(&from);
}
#endif

cert_pull::~cert_pull() {
  // @@protoc_insertion_point(destructor:proto.ca.cert_pull)
  SharedDtor();
}

void cert_pull::SharedDtor() {
  if (fingerprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fingerprint_;
  }
  if (this != default_instance_) {
  }
}

void cert_pull::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cert_pull::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cert_pull_descriptor_;
}

const cert_pull& cert_pull::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ca_2eproto();
  return *default_instance_;
}

cert_pull* cert_pull::default_instance_ = NULL;

cert_pull* cert_pull::New() const {
  return new cert_pull;
}

void cert_pull::Clear() {
  if (has_fingerprint()) {
    if (fingerprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      fingerprint_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cert_pull::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ca.cert_pull)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes fingerprint = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fingerprint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ca.cert_pull)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ca.cert_pull)
  return false;
#undef DO_
}

void cert_pull::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ca.cert_pull)
  // required bytes fingerprint = 1;
  if (has_fingerprint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->fingerprint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ca.cert_pull)
}

::google::protobuf::uint8* cert_pull::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ca.cert_pull)
  // required bytes fingerprint = 1;
  if (has_fingerprint()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->fingerprint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ca.cert_pull)
  return target;
}

int cert_pull::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes fingerprint = 1;
    if (has_fingerprint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fingerprint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cert_pull::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cert_pull* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cert_pull*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cert_pull::MergeFrom(const cert_pull& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fingerprint()) {
      set_fingerprint(from.fingerprint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cert_pull::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cert_pull::CopyFrom(const cert_pull& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cert_pull::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cert_pull::Swap(cert_pull* other) {
  if (other != this) {
    std::swap(fingerprint_, other->fingerprint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cert_pull::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cert_pull_descriptor_;
  metadata.reflection = cert_pull_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int csr_pull::kFingerprintFieldNumber;
#endif  // !_MSC_VER

csr_pull::csr_pull()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ca.csr_pull)
}

void csr_pull::InitAsDefaultInstance() {
}

csr_pull::csr_pull(const csr_pull& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.ca.csr_pull)
}

void csr_pull::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fingerprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
csr_pull::csr_pull(csr_pull&& from)
  : ::google::protobuf::Message() {
  Swap(&from);
}
#endif

csr_pull::~csr_pull() {
  // @@protoc_insertion_point(destructor:proto.ca.csr_pull)
  SharedDtor();
}

void csr_pull::SharedDtor() {
  if (fingerprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fingerprint_;
  }
  if (this != default_instance_) {
  }
}

void csr_pull::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csr_pull::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csr_pull_descriptor_;
}

const csr_pull& csr_pull::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ca_2eproto();
  return *default_instance_;
}

csr_pull* csr_pull::default_instance_ = NULL;

csr_pull* csr_pull::New() const {
  return new csr_pull;
}

void csr_pull::Clear() {
  if (has_fingerprint()) {
    if (fingerprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      fingerprint_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool csr_pull::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ca.csr_pull)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes fingerprint = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fingerprint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ca.csr_pull)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ca.csr_pull)
  return false;
#undef DO_
}

void csr_pull::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ca.csr_pull)
  // required bytes fingerprint = 1;
  if (has_fingerprint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->fingerprint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ca.csr_pull)
}

::google::protobuf::uint8* csr_pull::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ca.csr_pull)
  // required bytes fingerprint = 1;
  if (has_fingerprint()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->fingerprint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ca.csr_pull)
  return target;
}

int csr_pull::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes fingerprint = 1;
    if (has_fingerprint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fingerprint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csr_pull::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const csr_pull* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const csr_pull*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void csr_pull::MergeFrom(const csr_pull& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fingerprint()) {
      set_fingerprint(from.fingerprint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void csr_pull::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csr_pull::CopyFrom(const csr_pull& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csr_pull::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void csr_pull::Swap(csr_pull* other) {
  if (other != this) {
    std::swap(fingerprint_, other->fingerprint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata csr_pull::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csr_pull_descriptor_;
  metadata.reflection = csr_pull_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

csr_pendding::csr_pendding()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ca.csr_pendding)
}

void csr_pendding::InitAsDefaultInstance() {
}

csr_pendding::csr_pendding(const csr_pendding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.ca.csr_pendding)
}

void csr_pendding::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
csr_pendding::csr_pendding(csr_pendding&& from)
  : ::google::protobuf::Message() {
  Swap(&from);
}
#endif

csr_pendding::~csr_pendding() {
  // @@protoc_insertion_point(destructor:proto.ca.csr_pendding)
  SharedDtor();
}

void csr_pendding::SharedDtor() {
  if (this != default_instance_) {
  }
}

void csr_pendding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csr_pendding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csr_pendding_descriptor_;
}

const csr_pendding& csr_pendding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ca_2eproto();
  return *default_instance_;
}

csr_pendding* csr_pendding::default_instance_ = NULL;

csr_pendding* csr_pendding::New() const {
  return new csr_pendding;
}

void csr_pendding::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool csr_pendding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ca.csr_pendding)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ca.csr_pendding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ca.csr_pendding)
  return false;
#undef DO_
}

void csr_pendding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ca.csr_pendding)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ca.csr_pendding)
}

::google::protobuf::uint8* csr_pendding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ca.csr_pendding)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ca.csr_pendding)
  return target;
}

int csr_pendding::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csr_pendding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const csr_pendding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const csr_pendding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void csr_pendding::MergeFrom(const csr_pendding& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void csr_pendding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csr_pendding::CopyFrom(const csr_pendding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csr_pendding::IsInitialized() const {

  return true;
}

void csr_pendding::Swap(csr_pendding* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata csr_pendding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csr_pendding_descriptor_;
  metadata.reflection = csr_pendding_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int csr_pendding_list::kNumFieldNumber;
const int csr_pendding_list::kFingerprintFieldNumber;
#endif  // !_MSC_VER

csr_pendding_list::csr_pendding_list()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ca.csr_pendding_list)
}

void csr_pendding_list::InitAsDefaultInstance() {
}

csr_pendding_list::csr_pendding_list(const csr_pendding_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.ca.csr_pendding_list)
}

void csr_pendding_list::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
csr_pendding_list::csr_pendding_list(csr_pendding_list&& from)
  : ::google::protobuf::Message() {
  Swap(&from);
}
#endif

csr_pendding_list::~csr_pendding_list() {
  // @@protoc_insertion_point(destructor:proto.ca.csr_pendding_list)
  SharedDtor();
}

void csr_pendding_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void csr_pendding_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csr_pendding_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csr_pendding_list_descriptor_;
}

const csr_pendding_list& csr_pendding_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ca_2eproto();
  return *default_instance_;
}

csr_pendding_list* csr_pendding_list::default_instance_ = NULL;

csr_pendding_list* csr_pendding_list::New() const {
  return new csr_pendding_list;
}

void csr_pendding_list::Clear() {
  num_ = 0u;
  fingerprint_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool csr_pendding_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ca.csr_pendding_list)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fingerprint;
        break;
      }

      // repeated bytes fingerprint = 2;
      case 2: {
        if (tag == 18) {
         parse_fingerprint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_fingerprint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fingerprint;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ca.csr_pendding_list)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ca.csr_pendding_list)
  return false;
#undef DO_
}

void csr_pendding_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ca.csr_pendding_list)
  // required uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  // repeated bytes fingerprint = 2;
  for (int i = 0; i < this->fingerprint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->fingerprint(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ca.csr_pendding_list)
}

::google::protobuf::uint8* csr_pendding_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ca.csr_pendding_list)
  // required uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  // repeated bytes fingerprint = 2;
  for (int i = 0; i < this->fingerprint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->fingerprint(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ca.csr_pendding_list)
  return target;
}

int csr_pendding_list::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  // repeated bytes fingerprint = 2;
  total_size += 1 * this->fingerprint_size();
  for (int i = 0; i < this->fingerprint_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->fingerprint(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csr_pendding_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const csr_pendding_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const csr_pendding_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void csr_pendding_list::MergeFrom(const csr_pendding_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  fingerprint_.MergeFrom(from.fingerprint_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void csr_pendding_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csr_pendding_list::CopyFrom(const csr_pendding_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csr_pendding_list::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void csr_pendding_list::Swap(csr_pendding_list* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    fingerprint_.Swap(&other->fingerprint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata csr_pendding_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csr_pendding_list_descriptor_;
  metadata.reflection = csr_pendding_list_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ca
}  // namespace proto

// @@protoc_insertion_point(global_scope)
